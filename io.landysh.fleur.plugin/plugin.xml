<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?eclipse version="3.0"?><plugin>

   <!-- This is an example for providing an own category 
      <extension
         point="org.knime.workbench.repository.categories">
      <category
            description="Category containing my nodes"
            icon="icons/default.png"
            level-id="myNodes"
            name="My nodes"
            path="/"/>
   </extension>
   -->2
   
<extension
      id="fleur.knime.nodes"
      point="org.knime.workbench.repository.nodes">
<node category-path="/community/fleur/read" deprecated="false" factory-class="fleur.knime.nodes.fcs.read.set.ReadFCSSetNodeFactory"/>
<node after="fleur.knime.nodes.fcs.read.ReadFCSSetNodeFactory" category-path="/community/fleur/read" deprecated="false" factory-class="fleur.knime.nodes.fcs.read.set.ReadFCSTableNodeFactory"/>
<node category-path="/community/fleur/comp" deprecated="false" factory-class="fleur.knime.nodes.compensation.apply.ApplyCompensationNodeFactory"/>
<node after="inflor.knime.nodes.compensation.apply.ApplyCompensationNodeFactory" category-path="/community/fleur/comp" deprecated="false" factory-class="fleur.knime.nodes.compensation.extract.fcs.ExtractCommpensationNodeFactory"/>
<node after="inflor.knime.nodes.compensation.apply.ApplyCompensationNodeFactory" category-path="/community/fleur/comp" deprecated="false" factory-class="fleur.knime.nodes.compensation.extract.fjmtx.ExtractCompJONodeFactory"/>
<node category-path="/community/fleur/transform" deprecated="false" factory-class="fleur.knime.nodes.transform.create.TransformNodeFactory"/>
<node category-path="/community/fleur/util" deprecated="false" factory-class="fleur.knime.nodes.downsample.DownsampleNodeFactory"/>
<node category-path="/community/fleur/util" deprecated="true" factory-class="fleur.knime.nodes.portToTableCell.ColumnStoreToTableCellNodeFactory"/>
<node category-path="/community/fleur/analyze" deprecated="false" factory-class="fleur.knime.nodes.gating.CreateGatesNodeFactory"/>
<node category-path="/community/fleur/analyze" deprecated="true" factory-class="fleur.knime.nodes.statistics.SummaryStatisticsNodeFactory"/>
<node category-path="/community/fleur/analyze" deprecated="false" factory-class="fleur.knime.nodes.utility.extract.data.ExtractDataNodeFactory"/>
<node category-path="/community/fleur/analyze" deprecated="false" factory-class="fleur.knime.nodes.bhtsne.table.TSNENodeFactory">
</node>
<node category-path="/community/fleur/comp" deprecated="false" factory-class="fleur.knime.nodes.compensation.calculate.CalculateCompensationNodeFactory"/>
<node category-path="/community/fleur/util" factory-class="fleur.knime.nodes.compensation.convert.ConvertMatrixNodeFactory"/>
</extension>

<extension point="org.knime.workbench.repository.categories">
		<category icon="META-INF/icons/inflor_knime.png" level-id="fleur" locked="true" name="Fleur Cytometry" path="/community"/>
  <category description="Nodes for reading FCS Files (eg. to table, frame or set)." icon="META-INF/icons/inflor_knime.png" level-id="read" locked="true" name="Read FCS" path="/community/fleur">
  </category>
  <category after="read" description="Nodes pertaining to the creation and application of compensation matricies" icon="META-INF/icons/inflor_knime.png" level-id="comp" locked="true" name="Compensate" path="/community/fleur">
  </category>
  <category after="comp" description="Nodes related to creating or altering display transformations (eg. linear, log, or logicle)" icon="META-INF/icons/inflor_knime.png" level-id="transform" locked="true" name="Transform" path="/community/fleur">
  </category>
  <category after="transform" description="Nodes to further ananlysis and characterization of cytometry data (eg. gating, sne, clustering)" icon="META-INF/icons/inflor_knime.png" level-id="analyze" locked="true" name="Analyze" path="/community/fleur">
  </category>
  <category after="analyze" icon="META-INF/icons/inflor_knime.png" level-id="util" locked="true" name="Utilities" path="/community/fleur">
  </category>
</extension>

<extension point="org.knime.core.PortType">
      <portType color="#9B30FF" hidden="false" name="Fleur.FCSFrame" objectClass="fleur.knime.ports.fcs.FCSFramePortObject" objectSerializer="fleur.knime.ports.fcs.FCSFramePortObject$Serializer" specClass="fleur.knime.ports.fcs.FCSFramePortSpec" specSerializer="fleur.knime.ports.fcs.FCSFramePortSpec$Serializer"/>
      <portType color="#F300FF" hidden="false" name="Fleur.CompMatrix" objectClass="fleur.knime.ports.compensation.CompMatrixPortObject" objectSerializer="fleur.knime.ports.compensation.CompMatrixPortObject$Serializer" specClass="fleur.knime.ports.compensation.CompMatrixPortSpec" specSerializer="fleur.knime.ports.compensation.CompMatrixPortSpec$Serializer">
      </portType>
</extension>
<extension point="org.knime.core.DataType">
   <DataType cellClass="fleur.knime.data.type.cell.fcs.FCSFrameFileStoreDataCell" factoryClass="fleur.knime.data.type.cell.fcs.FCSFrameCellFactory">
      <serializer cellClass="fleur.knime.data.type.cell.fcs.FCSFrameFileStoreDataCell" serializerClass="fleur.knime.data.type.cell.fcs.FCSFrameFileStoreDataCell$Serializer">
      </serializer>
   </DataType>
</extension>
<extension point="org.knime.core.DataValueRenderer">
   <dataValue valueClass="fleur.knime.data.type.cell.fcs.FCSFrameDataValue">
      <renderer rendererFactoryClass="fleur.knime.data.type.cell.fcs.FCSFrameCellRenererFactory" suggestAsDefault="true">
      </renderer>
   </dataValue>
</extension>
   
</plugin>
